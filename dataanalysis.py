# -*- coding: utf-8 -*-
"""DataANALYSIS1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PBN71-yqVk-rBEX0UcNSMlDgu2elbf7_
"""

import numpy as np
import pandas as pd

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

import warnings
warnings.filterwarnings('ignore')

import pandas as pd
file_path ='/content/IMDB-Movie-Data.csv'
data=pd.read_csv(file_path)

"""# 1. Display Top 10 Rows of The Dataset"""

data.head(10)

"""# 2. Check Last 10 Rows of The Dataset"""

data.tail(10)

"""# 3. Find Shape of Our Dataset (Number of Rows And Number of Columns)"""

data.shape

print('Number of Rows',data.shape[0])
print('Number of Columns',data.shape[1])
data = pd.read_csv('/content/IMDB-Movie-Data.csv')

"""# 4. Getting Information About Our Dataset Like Total Number Rows, Total Number of Columns, Datatypes of Each Column And Memory Requirement"""

data.info()

"""# 5. Check Null Values In The Dataset"""

data.isnull().sum()

import matplotlib.pyplot as plt
import seaborn as sns
sns.heatmap(data.isnull())
plt.show()

"""# 6. Drop All The Missing Values"""

data = data.dropna(axis=0)

sns.heatmap(data.isnull())
plt.show()

"""# 7. Check For Duplicate Data"""

dup_data=data.duplicated().any()
print("Are there any duplicated values in data?",dup_data)

"""# 8. Get Overall Statistics About The DataFrame"""

data.describe()

"""# 9. Display Title of The Movie Having Runtime >= 180 Minutes"""

data[data['Runtime (Minutes)']>=180]['Title']

"""# 10. In Which Year There Was The Highest Voting?"""

sns.barplot(x='Year',y='Votes',data=data,color='#ED503E')
plt.title("Votes By Year")
plt.show()

"""# 11. In Which Year There Was The Highest Revenue?"""

sns.barplot(x='Year',y='Revenue (Millions)',data=data,color='#ED503E')
plt.title("Revenue By Year")
plt.show()

"""# 12. Find The Average Rating For Each Director"""

data.groupby('Director')['Rating'].mean().sort_values(ascending=False)

"""# 13. Display Top 10 Lengthy Movies Title"""

le =data.nlargest(10,'Runtime (Minutes)')[['Title','Runtime (Minutes)']]. \
set_index('Title')

import seaborn as sns
import matplotlib.pyplot as plt
le = le.reset_index()
sns.barplot(x='Runtime (Minutes)',y=le.index,data=le,color='#ED503E')
plt.title('Top 10 Lengthy Movies')
plt.xlabel('Runtime (Minutes)')
plt.ylabel('Movie Title')
plt.show()

"""# 14. Display Number of Movies Per Year"""

sns.countplot(x='Year',data=data,color='#ED503E')
plt.title("Number of Movies Per Year")

"""# 15. Find Most Popular Movie Title (Higest Revenue)"""

data.columns

data[data['Revenue (Millions)'].max() == data['Revenue (Millions)']]['Title']

"""# 16. Display Top 10 Highest Rated Movie Titles And its Directors"""

top_10=data.nlargest(10,'Rating')[['Title','Rating','Director']].set_index('Title')

top_10

top_10 = data.nlargest(10,'Rating')[['Title','Rating','Director']].set_index('Title')
sns.barplot(x=top_10.index, y=top_10['Rating'],color='#ED503E')
plt.title("Display Top 10 Highest Rated Movie Titles")
plt.xticks(rotation=90)
plt.show()

"""# 16.1 Display Top 5 Highest RATED MOVIES OVERALL

*`:the code to find the top 5 rated movies overall.`*
"""

top_5_overall = data.nlargest(5, 'Rating')[['Title', 'Rating', 'Director', 'Genre']].set_index('Title')

print("Top 5 Highest Rated Movies Overall:")
top_5_overall

plt.figure(figsize=(10, 4))
sns.barplot(x='Rating', y=top_5_overall.index, data=top_5_overall,color='#ED503E')
plt.title("Top 5 Highest Rated Movies Overall")
plt.xlabel("Rating")
plt.show()

"""# 17. Display Top 10 Highest Revenue Movie Titles"""

data.columns

data.sort_values(by='Revenue (Millions)',ascending=False).head(10)

top_10 = data.nlargest(10,'Revenue (Millions)')[['Title','Director','Revenue (Millions)']].set_index('Title')

sns.barplot(x=top_10.index, y=top_10['Revenue (Millions)'],color='#ED503E')
plt.title("Display Top 10 Highest Revenue Movie Titles")
plt.xticks(rotation=90)
plt.show()

"""# 18.  Find Average Rating of Movies Year-wise"""

data.columns

data1 = data.groupby('Year')[['Year','Rating']].mean().\
sort_values(by='Rating',ascending=False).set_index('Year')

data1

plt.figure(figsize=(10,5))
sns.barplot(x=data1.index, y=data1['Rating'],color='#ED503E')

plt.show()

"""# 19. Does Rating Affect The Revenue?"""

sns.scatterplot(x='Rating',y='Revenue (Millions)',data=data,color='#ED503E')

"""# Answer : Yes

# 20. Classify Movies Based on Ratings [Good,Better and Best]
"""

data.columns

def rating(rating):
    if rating>=7.0:
        return 'Excellent'
    elif rating>=6.0:
        return 'Good'
    else:
        return 'Average'

data['rating_cat']=data['Rating'].apply(rating)

data.head(1)

"""# 21. Count Number of Movies in any genre

this requires user input
"""

list1=[]
for value in data['Genre']:
    list1.append(value.split(','))

data['temp']=list1

genre=input("Enter Genre you want to count : ").title()
count=0
for value in data['temp']:
    if genre in value:
        count=count+1
print("Total Count is",count)

"""# OR"""

len(data[data['Genre'].str.contains('action',case=False)])

"""#22. Display Top 10 Rated Movies in Action Genre

*` Find the top 10 rated movies in the action genre`*
"""

action_movies = data[data['Genre'].str.contains('action', case=False)]

action_movies = data[data['Genre'].str.contains('action', case=False)]

print("Top 10 Rated action Movies:")
action_movies

plt.figure(figsize=(10, 6))
sns.barplot(x='Rating', y=action_movies.index, data=action_movies,color='#ED503E')
plt.title("Top 10 Rated Action Movies")
plt.xlabel("Rating")
plt.show()

"""# 23. Find Correlation Between Different Numeric Features"""

numeric_data = data.select_dtypes(include=[np.number])

correlation_matrix = numeric_data.corr()

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

numeric_data = data.select_dtypes(include=[np.number])

correlation_matrix = numeric_data.corr()

plt.figure(figsize=(10, 8))
mask = np.triu(np.ones_like(correlation_matrix, dtype=bool))
sns.heatmap(correlation_matrix,
            annot=True,
            mask=mask,
            cmap='coolwarm',
            vmin=-1, vmax=1,
            fmt='.2f',
            linewidths=0.5)

plt.title('Correlation Between Movie Features')
plt.tight_layout()
plt.show()

correlation_pairs = []
for col1 in correlation_matrix.columns:
    for col2 in correlation_matrix.columns:
        if col1 != col2 and col1 < col2:
            correlation_pairs.append((col1, col2, correlation_matrix.loc[col1, col2]))

correlation_pairs.sort(key=lambda x: abs(x[2]), reverse=True)

print("Top 5 Strongest Feature Correlations:")
for col1, col2, corr in correlation_pairs[:5]:
    print(f"{col1} and {col2}: {corr:.3f}")